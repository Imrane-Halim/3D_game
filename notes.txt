resource: https://github.com/Saxsori/ray-cast/blob/main/README.md

>>>>>>>>>>>>> concepts first: SOHCAHTOA, VECTORS

// ---------------- first: SOHCAHTOA --------------------

sohcahtoa is an easy way to remamber how SIN, COS and TAN work:
>> NOTE: sin,cos,tan can be called trigonometric ratios.

                   /|
                  /_|
                 / o|
                /   |
    hypotenuse /    | adjacent
              /     |
             /      |
            /______+|
            opposite


..soh..: sin = opposite / hypotenuse
..cah..: cos = adjacent / hypotenuse
..toa..: tan = opposite / adjacent

e.g: adjacent = 7, opposite = 8, hypotenuse ~= 11.31

sin = 8/11
cos = 7/11
tan = 7/7

// ---------------- second: VECTORS --------------------


in a 2D coordinate system, vector can be represented as follow:

    ->
    V  = (Vx, vy)

    example of 2D representation:

        y
        ^     ^       V
        |     |     /
        |     |    /
        |  Vy |   /
        |     |  /
        |     | /
        |     +------>
        |           Vx
    <---+----------------------> x
      o |
        
the vector and it's components can form a right angled triangle:
            

             /|
            /-|
         V / o| Vy
          /   |
         /    |
        +------
           Vx

for the triangle above:
    - opposite: Vx
    - adjacent: Vy
    - hypotenuse: V
cos(o) = Vy/V
sin(o) = Vx/V
tan(o) = Vx/Vy


note: Pythagorean Theorem: c = sqrt((Dx)^2 + (Dy)^2)
using Pythagorean Theorem we can get the lenght (or magnitude)
of V using the following formula (|| used for length, not ABS):

    | V | = sqrt(Vx^2 + Vy^2)

    e.g: Vx = 2, Vy = 2
    | V | = sqrt(4 + 4) = sqrt(8) ~= 2.83

to find the direction of a vector we sove tan(o) for o,
in other words, calculate tan(o).


>>>>>>>>>>>>> ray tracing stuff:

giving the following 2 points, START and END:

                        END
                        |
                        .
                       /|
                      / |
                     /  |
                    /   |
                   /    |
                  /     |
                 /      |
            c   /       | dy
               /        |
              /         |
             /          |
            /           |
           /            |
          /____________+|
          ^     dx
          |
        START

from this shape we know:
    c = sqrt(dx^2 + dy^2)
    m = dy / dx (gradiant or slope m = (y1 - y0)/(x1 - x0))

- if we moved 1 dx along then we moved 1 dy upwords
- if dx is set to 1, then dy is devided by dx (dy/dx)
- therefore:
    - dy / dx = sqrt(1^2 + (dy / dx)^2)

conclution:
    - if we move 1unit in the x direction, the length of the ray can be calculate as:
        Sx = sqrt(1^2 + (dy / dx)^2)
    - if we moved the same thing in y direction:
        Sy = sqrt(1^2 + (dx / dy)^2) 

example:
    
        y
        ^     ^       (V)
        |     |     /
        |     |    /
        |  dy |   /
        |     |  /
        |     | /
        |     +------>
        |         dx
    <---+----------------------> x
      o |

to get the lenght of (V) we can use:

    lenght = dx * Sx
    or 
    lenght = dy * Sy

    Sx and Sy being the scaling factors

--> some other resources that might be helpful:
    https://permadi.com/1996/05/ray-casting-tutorial-5/

/*
source: https://permadi.com/1996/05/ray-casting-tutorial-7/
--------->finding horizontal intersection: 

1. find the coordinates of the first ever point, let's call it A
	--> for y:
	if (ray facing up)
		A.y = ((int)player.y / TILESIZE) * TILESIZE - 1;
	if (ray facing down)
		A.y = ((int)player.y / TILESIZE) * TILESIZE + TILESIZE;
	
	some explanation:
		we must decide whether A is part of the block above the grid line, 
		that is why we substract -1 from A.y
	
	--> for x:
	A.x = player.x + (player.y - A.y) / tan (RAY_ANGLE)

2. find offsets
	if (ray facing up)
		Ya = -TILESIZE;
	if (ray facing down)
		Ya = TILESIZE;
	
	Xa = TILESIZE / tan(FOV)

3. check the grid for a wall
4. if there is no wall, move to next point:
	Ynew = Yold + Ya;
	Xnew = Xold + Xa;
*/